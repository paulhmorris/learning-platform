datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String?
  lastName        String?
  phone           String?
  role            UserRole @default(USER)
  isActive        Boolean  @default(true)
  isEmailVerified Boolean  @default(false)
  stripeId        String?

  stripeVerificationSessionId String?
  isIdentityVerified          Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password         Password?
  passwordResets   PasswordReset[]
  verification     UserVerification?
  courses          UserCourses[]
  lessonProgresses UserLessonProgress[]
  quizProgresses   UserQuizProgress[]
}

model UserVerification {
  id        String   @id @default(cuid())
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Course {
  id                           String  @id @default(cuid())
  strapiId                     Int
  stripePriceId                String
  stripeProductId              String
  /// e.g. "course.hiphopdriving.com"
  host                         String  @unique
  /// e.g. "Hip Hop Driving"
  emailFromName                String  @default("Plumb Media & Education")
  /// e.g. "hiphopdriving.com"
  emailFromDomain              String  @default("plumblearning.com")
  requiresIdentityVerification Boolean @default(false)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userCourses UserCourses[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  expiresAt DateTime
  usedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Relations
model UserCourses {
  id                 Int       @id @default(autoincrement())
  isCompleted        Boolean   @default(false)
  completedAt        DateTime?
  certificateClaimed Boolean   @default(false)
  certificateS3Key   String?
  certificateNumber  String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model UserLessonProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  /// The lesson id from Strapi
  lessonId Int

  durationInSeconds Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model UserQuizProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)
  score       Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  /// The quiz id from Strapi
  quizId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, quizId])
}
