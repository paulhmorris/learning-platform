datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

model User {
  id       String   @id @default(cuid())
  clerkId  String?  @unique
  role     UserRole @default(USER)
  stripeId String?

  stripeVerificationSessionId String?

  courses          UserCourses[]
  quizProgresses   UserQuizProgress[]
  lessonProgresses UserLessonProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [clerkId])
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Course {
  id                           String  @id @default(cuid())
  strapiId                     Int
  stripePriceId                String
  stripeProductId              String
  /// e.g. "course.hiphopdriving.com"
  host                         String  @unique
  requiresIdentityVerification Boolean @default(false)

  userCourses UserCourses[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [strapiId])
}

// Relations
model UserCourses {
  id                 Int       @id @default(autoincrement())
  isCompleted        Boolean   @default(false)
  completedAt        DateTime?
  certificateClaimed Boolean   @default(false)
  certificateS3Key   String?
  certificateNumber  String?
  userId             String
  courseId           String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model UserLessonProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  /// The lesson id from Strapi
  lessonId Int

  durationInSeconds Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

model UserQuizProgress {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)
  score       Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  /// The quiz id from Strapi
  quizId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, quizId])
}
